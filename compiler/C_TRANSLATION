Descriptors:

- routine_descriptor has:       // init outside of main (NULL for start_label)
  - char *name
  - char type                   // 'S' or 'F'
  - int num_params_blocks
  - param_block_descriptors *   // init outside of main
  - void *start_label;          // set in routine init
  - int routine_offset          // from start of module instance, routine init

- param_block_descriptor has:   // init outside of main
  - char *name;                 // NULL for pos_params
  - int num_params;             // required and optional
  - int num_required_params;
  - int defaults_size;          // bytes
  - void *defaults_block;       // initialized as &(struct param_block_s){...}
  - int *param_offsets;         // indexed by num args passed
                                // initialized as (int []){...}

- use_descriptor has:
  - char *alias_name
  - int offset                  // offset from start of containing module to
                                // used module instance

- module_descriptor has:        // init outside of main
  - char *name
  - char *filename
  - int num_uses
  - int num_routines
  - use_descriptor *uses        // initialized as (use_descriptor []){{...}, }
  - routine_descriptor *routines[] // initialized as {&routine_desc, ...}


Instances:

- label, sub_ret, fn_ret, sub and fn pointers have:
  - struct routine_instance_s *context      // also serves as param_context
  - routine_descriptor *descriptor

- struct routine_instance_s has:   // shared by all routine instances
  - routine_descriptor *descriptor // init outside of main
  - unsigned long flags            // initialized to 0 outside of main
  - module_instance *global        // constant set in routine init C fun
  - unsigned long lineno
  - ret pointer (above)

- routine instance has:
  - routine_instance_s
  - parameters
  - locals
  - temps
  - dlt_mask                            // optional


- module instance has:
  - module_descriptor *descriptor
  - "use" module instances              // init outside of main
  - module parameter/variables          // init inside of main by init C fun
  - routine instances                   // init outside of main


- opmode_instance opmode                // global variable
- builtin_instance builtins             // global variable


SOURCE FILE LAYOUT:

- built-in types
- all descriptors
  - param_block_descriptors before their routine_descriptors
  - routine_descriptors before their module_descriptors
- all struct definitions
  - routine instance structs before their module_structs
  - used module instance structs before using module instance structs
- top-level opmode instance declaration
- builtins declaration

- "main"
  - struct routine_instance_s *current_routine;
  - call builtin_init
  - call top-level opmode_init
  - code for each module (not instance)
    - module init code
      - initialize module parameters/variables
      - call module inits for used modules
      - init all contained routines
    - code for each routine in that module (not instance)
  - built-in code
    - get_subroutines_by_name(routine_name$) -> TYPE SUBROUTINE generator
      - in bottom up order


EXECUTABLE CODE:

- all code is generated into one "main()" function.
  - uses jump labels and gcc &&label within the routines.

- goto (passes params, no return, might be to pointer)
  - check running set in label_context.flags
  - pointer is label_pointer, otherwise info known at compile time
  - steps:
    - store parameters
    - memcpy defaults                     // can be skipped if known label with
                                          // no defaults
    - restore label_context               // can be skipped if known label in
                                          // same context
    - goto *label

- return
  - check my running flag
  - set params through *param_block
  - reset my running flag
  - restore context
  - goto label

- call
  - check not remote prepared
  - check and set remote running flag
  - for each param_block:
    - set params to remote param_block
    - memcpy defaults                     // can be skipped if known routine
                                          // with no defaults on this
                                          // param_block.
  - call routine
    - if calling a fn:
      - store context in remote param_context
      - store param_block_descriptor
    - store context in remote ret_info.context
    - store ret_label
    - goto start_label
