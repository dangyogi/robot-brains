Descriptors:

- label_descriptor
  - one per label for each module instance
  - init outside of main (except for start_label)
  - has:
    - char *name
    - char type                     // 'S', 'F' or 'L'
    - module instance *module
    - int num_param_blocks
    * param_block_descriptors *param_block_decriptors
    * unsigned long params_passed   // one bit per var
      - has param_passed and kw_passed bits
      - has one running bit for subroutines and functions
    * label_descriptor *return_label
      - for subroutines and functions
    * void *start_label;            // set in label init

- param_block_descriptor
  - one per param_block per label for each module instance
  - init outside of main
  - has:
    - char *name;                   // "__pos__" for pos_params
    - int num_params;               // required and optional
    - int num_required_params;
    - int num_optional_params;
    - void *param_location[];       // all params, indexed by param number
                                    // initialized as {&x, &y, ...}
    - unsigned long *var_set_masks; // all params, indexed by param number
                                    // applied to module.flags
                                    // initialized as (unsigned long []){...}
    - unsigned long kw_mask;        // 1 bit set; 0 if required keyword
                                    // applied to label.flags
    - unsigned long *param_masks;   // indexed by _optional_ param number
                                    // applied to label.flags
                                    // initialized as (unsigned long []){...}

- module_descriptor
  - one for each module instance
  - init outside of main
  - has:
    - char *name                    // full path, e.g., "a.b.c"
    - char *filename
    - label_descriptor *module_params
    - unsigned long vars_set        // one bit per var
      - init to 0 outside of main
    - unsigned long lineno
    - int num_labels
    - label_descriptor *labels[]    // initialized as {&label_desc, ...}


Instances:

- label, sub_ret, fn_ret, sub and fn pointers
  - are just:
    - label_descriptor *descriptor

- struct module_instance_s
  - same type for each module instance
  - is just:
    - module_descriptor *descriptor  // init in main

- module instance
  - one for each module instance
  - has:
    - module_descriptor
    - "use" module instances         // init outside of main
    - variables
      - module parameters init in main
    - label temps
    - label dlt_masks


- opmode_instance opmode             // global variable
- builtin_instance builtins          // global variable


SOURCE FILE LAYOUT:

- built-in types and C helper functions (from C_preamble file)
- all module instance struct definitions
  - used module instance structs before using module instance structs
- top-level opmode instance declaration
- builtins instance declaration
- all descriptors
  - label_descriptors before their module_descriptors
- int __num_modules__ constant
- module instance * __module_instances__ (bottom-up "uses" order)

- "main"
  - init start_labels in all label_descriptors
  - set module descriptor pointer in all module instances
  - initialize module parameters/variables in all module instances
    - call exprs in use arguments
    - initialize module vars_set
      - vars set
    - initialize label params_passed
      - params passed, kw_passed
  - call cycle.run
  - return 0
  - code for each module instance
  - built-in code
    - get_num_modules
    - get_num_labels module_index
    - get_label_name module_index label_index
    - get_label module_index label_index


EXECUTABLE CODE:

- all code is generated into one "main()" function.
  - uses jump labels and gcc &&label within the routines.

- goto (passes params, no return, might be to pointer)
  - pointer is label_pointer, otherwise info known at compile time
  - steps:
    - reset all passed bits in label.params_passed
    - store parameters
    - set passed bits in label.params_passed
    - set var_set bits in module.vars_set
    - goto *start_label

- return
  - check my running flag in label.params_passed
  - reset all passed bits in label.params_passed
  - set params through *param_block
    - set passed bits in label.params_passed
    - set var_set bits in module.vars_set
  - reset my running flag in label.params_passed
  - goto *start_label

- call
  - check and set remote running flag in label.params_passed
  - for each param_block:
    - reset all passed bits in label.params_passed
    - set params in remote param_block
    - set passed bits in label.params_passed
    - set var_set bits in module.vars_set
  - call routine
    - store label_descriptor for return label in remote label.return_label
    - goto *start_label

