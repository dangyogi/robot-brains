
- routine_descriptor has:       // init outside of main (NULL for start_label)
  - char *name
  - void *start_label;          // set in routine init
  - int num_params_blocks
  - param_block_descriptors[]
- param_block_descriptor has:   // init outside of main
  - char *name;                 // NULL for pos_params
  - int param_block_offset;     // offset from context
  - int default_param_offset;   // offset from context to first default param
  - int defaults_size;          // sizeof defaults block
  - void *defaults_block;
  - int default_offsets[];      // indexed by num args passed

- label, sub_ret, fn_ret, sub and fn pointers have:
  - void *context               // also serves as param_context
  - routine_descriptor *descriptor

- struct context_s has:  // shared by all routine instances
  - routine_descriptor *descriptor // init outside of main
  - unsigned long flags            // initialized to 0 outside of main
  - module_instance *global        // constant set in routine init C fun
  - unsigned long lineno
  - ret pointer (above)

- routine instance has:
  - context_s
  - parameters
  - locals
  - temps
  - dlt_mask                            // optional


- module_descriptor has:                // init outside of main
  - char *name
  - char *filename
  - int num_routines
  - routine_descriptor *routines[]


- struct module_s has:   // shared by all module instances
  - module_descriptor *descriptor       // init outside of main
  - routine instances *[]               // init outside of main


- module instance has:
  - module_descriptor *descriptor       // init outside of main
  - routine instances *[]               // init outside of main
  - "use" module instance pointers      // init outside of main
  - module parameter/variables          // init inside of main by init C fun


- module instance list (in "uses" tsort order, bottom up)
  - module_s *[]


SOURCE FILE LAYOUT:

- built-in types
- all typedefs
  - modules before contained routines
  - used modules before using modules
- all descriptors
  - param_block_descriptors before their routine_descriptors
  - routine_descriptors before their module_descriptors
- all struct definitions
  - routine instance structs before their module_structs
  - used module instance structs before using module instance structs
- all module instance declarations
  - used modules before using modules
  - top-level opmode last
- init C functions
  - routine init C function
    - before containing module init C function
  - module init C function:
    - initialize module parameters/variables
    - call all contained routine inits
- "main"
  - struct context_s *context;
  - call module init C functions for each module instance in bottom up order
  - code for each module (not instance)
    - code for each routine in that module (not instance)
  - built-in code
    - get_routines_by_name(routine_name$) -> TYPE SUBROUTINE generator
      - in bottom up order


EXECUTABLE CODE:

- all code is generated into one "main()" function.
  - uses jump labels and gcc &&label within the routines.

- goto (passes params, no return, might be to pointer)
  - check running set in label_context.flags
  - pointer is label_pointer, otherwise info known at compile time
  - steps:
    - store parameters
    - memcpy defaults                     // can be skipped if known label with
                                          // no defaults
    - restore label_context               // can be skipped if known label in
                                          // same context
    - goto *label

- return
  - check my running flag
  - set params through *param_block
  - reset my running flag
  - restore context
  - goto label

- call
  - check not remote prepared
  - check and set remote running flag
  - for each param_block:
    - set params to remote param_block
    - memcpy defaults                     // can be skipped if known routine
                                          // with no defaults on this
                                          // param_block.
  - call routine
    - if calling a fn:
      - store context in remote param_context
      - store param_block_descriptor
    - store context in remote ret_info.context
    - store ret_label
    - goto start_label
