#include <stdio.h>
#include <math.h>

// varargs
#include <stdarg.h>

// exit
#include <stdlib.h>


struct label_descriptor_s {
    /////////////// initialized outside of main:
    char *name;
    char *type;                   // 'label', 'subroutine', 'function',
                                  // 'native_subroutine', 'native_function'
    int num_param_blocks;

    // first param_block_descriptor is always positional parameters
    // initialized as: (struct param_block_descriptor_s []){ ... }
    struct param_block_descriptor_s *param_block_descriptors;

    unsigned long params_passed;  // has RUNNING, kw_passed, param_passed bits.

    unsigned long lineno;
    struct label_descriptor_s *return_label;

    /////////////// initialized in module init:
    struct module_descriptor_s *module;
    void *label;
};


struct param_block_descriptor_s { // initialized outside of main
    char *name;                   // NULL for pos_params
                                  // KEYWORD name for kw_params
                                  // LABEL name for Labeled_block params
    int num_params;               // required and optional
    int num_required_params;
    int num_optional_params;
    void **param_locations;       // indexed by parameter number (first is 0)
                                  // initialized as (void *[]){&x, &y, ...}
    unsigned long *var_set_masks; // all params, indexed by param number
                                  // applied to module.vars_set
                                  // initialized as (unsigned long []){...}
    unsigned long kw_mask;        // 0 if required keyword
                                  // applied to label.params_passed
    unsigned long *param_masks;   // passed masks for optional parameters
                                  // indexed by optional parameter number
                                  //   (first optional param is 0)
                                  // initialized as (unsigned long []){...}
};


struct module_descriptor_s {      // initialized outside main
    char *name;
    char *filename;
    struct label_descriptor_s *module_params;
    unsigned long vars_set;       // one bit per var, init to 0 outside of main
    int num_labels;

    // initialized as {&label_desc, ...}
    struct label_descriptor_s *labels[];
};


#define FLAG_RUNNING            0x01


void
report_error(struct label_descriptor_s *containing_label, char *format, ...) {
    va_list args;

    va_start(args, format);
    fprintf(stderr, "%s[%lu]: ",
            containing_label->module->name, containing_label->lineno);
    vfprintf(stderr, format, args);
    va_end(args);
    exit(1);
}


void
report_var_not_set(struct label_descriptor_s *containing_label,
                   unsigned long got, unsigned long expected, ...)
{
    va_list valist;

    va_start(valist, expected);
    while (expected) {
        if (expected & 1) {
            char *var_name = va_arg(valist, char *);
            if (!(got & 1)) {
                report_error(containing_label, "Variable (%s) not set\n", 
                             var_name);
            }
        }
        expected >> 1;
        got >> 1;
    }

    va_end(valist);
}


void
range_check(struct label_descriptor_s *containing_label,
            long subscript, long max)
{
    if (subscript < 0 || subscript >= max) {
        report_error(containing_label,
                     "Subscript (%ld) out of range, DIM is %ld\n", 
                     subscript, max);
    }
}


void *
param_location(struct label_descriptor_s *dest_label, char *keyword, int n) {
    // Returns the param_location for the indicated parameter.
    //
    // Pass keyword of NULL for the positional parameters.
    //
    // Applies the kw_mask to dest_label->params_passed.
    // Applies the param_mask to dest_label->params_passed.
    // Applies the var_set_mask to dest_label->module->vars_set.
    //
    // Parameter numbers start with 0 within each keyword block.

    struct param_block_descriptor_s *pb;

    if (keyword == NULL) {
        pb = &dest_label->param_block_descriptors[0];
    } else {
        // Find keyword
        //
        // Applies its kw_mask to dest_label->params_passed.
        for (i = 1; i < dest_label->num_param_blocks; i++) {
            if (strcmp(dest_label->param_block_descriptors[i].name, keyword)
                == 0)
            {
                dest_label->params_passed |= 
                  dest_label->param_block_descriptors[i].kw_mask;
                pb = &dest_label->param_block_descriptors[i];
                goto found;
            }
        }
        fprint(stderr, "Internal Error: KEYWORD, %s, not found\n", keyword);
        exit(1);
    }

  found:
    // Returns param_location for param n.
    //
    // Applies its param_mask to dest_label->params_passed.
    // Applies its var_set_mask to dest_label->module->vars_set.
    if (pb->num_required_params <= n) {
        dest_label->params_passed |= \
          pb.param_masks[n - pb->num_required_params];
    }
    dest_label->module->vars_set |= pb.var_set_masks[n];
    return pb->param_locations[n];
}

