
// offsetof
#include <stddef.h>

// memcpy
#include <string.h>



struct routine_descriptor_s {
    // initialized outside of main:
    char *name;
    char type;                  // 'S' 'F', or 'L'
    int num_param_blocks;

    // first param_block_descriptor is always positional parameters
    struct param_block_descriptor_s *param_block_descriptors;

    // initialized in module init:
    int routine_offset;         // from start of module instance
    void *start_label;          // set in routine init code
};


struct param_block_descriptor_s {    // initialized outside main
    char *name;                 // "__pos__" for pos_params
                                // KEYWORD name for kw_params
                                // LABEL name for Labeled_block params
    int num_params;             // required and optional
    int num_required_params;
    int defaults_size;          // bytes
    void *defaults_block;       // initialized as &(struct param_block_s){...}
    int *param_offsets;         // from start of routine instance,
                                // indexed by parameter number (starting with 0)
                                // initialized as (int []){...}
};


struct use_descriptor_s {
    char *alias_name;           // initialized outside main
    int offset;                 // from start of containing module to
                                // used module instance.
                                // Set in containing module_init.
};


struct module_descriptor_s {    // initialized outside main
    char *name;
    char *filename;
    int num_uses;
    int num_routines;

    // initialized as (struct use_descriptor_s []){{...}, {...}}
    struct use_descriptor_s *uses;

    // initialized as {&routine_desc, ...}
    struct routine_descriptor_s *routines[];
};


struct routine_pointer_s {
    struct routine_instance_s *ret_context;
    struct routine_descriptor_s *descriptor;
};


struct routine_instance_s {
    struct routine_descriptor_s *descriptor;
    void *global;                       // points to parent module instance
    unsigned long flags;
    unsigned long lineno;
    struct routine_pointer_s ret_pointer;
};


#define FLAG_RUNNING            0x01
#define FLAG_PREPARED           0x02

