operator precedence (highest to lowest)
    '.' (left)
    '^' (right)
    unary '-' (right)
    '*' '%' (left)
    '/' (right)
    '+' '-' (left)
    '<' '<=' '<~=' '>' '>=' '>~=' '~=' '!~=' '<~>' (nonassoc)
    '==' '!=' '<>' (nonassoc)
    NOT (nonassoc)


source_file : {NEWLINE} (opmode | module)


opmode : (AUTONOMOUS | TELEOP) OPMODE NEWLINES
         {use}
         {typedef}


module : MODULE parameters NEWLINES
         {use}
         {typedef}
         {vartype}
         {step}


use : USE IDENT [AS IDENT] arguments NEWLINES


typedef : TYPE IDENT IS type NEWLINES


type : simple_type
     | FUNCTION [TAKING parameter_types] [RETURNING parameter_types]
     | SUBROUTINE [TAKING parameter_types]
     | LABEL [TAKING parameter_types]


simple_type : ref_primary
            | '(' type ')'
            | TYPE


ref_primary : INTEGER
            | FLOAT
            | BOOLEAN
            | STRING
            | MODULE
            | IDENT
            | simple_primary '.' IDENT
            | simple_primary '.' TYPE


parameter_types : pos_parameter_types1
                | pos_parameter_types 1{kw_parameter_type}


pos_parameter_types1 : 1{simple_type}
                     | {simple_type} '?' 1{simple_type}


pos_parameter_types : {simple_type} ['?' 1{simple_type}]


kw_parameter_type : (KEYWORD | OPT_KEYWORD) pos_parameter_types


vartype : VAR IDENT IS type NEWLINES
        | DIM IDENT '[' dimensions ']' NEWLINES

dimensions : const_expr
           | dimensions ',' const_expr

step : label_decl
         {typedef}
         {vartype}
         {statement}


label_decl : FUNCTION IDENT parameters [RETURNING parameter_types] NEWLINES
           | SUBROUTINE IDENT parameters NEWLINES
           | LABEL IDENT parameters NEWLINES


parameters : pos_parameters {kw_parameter}


pos_parameters : {IDENT} ['?' 1{IDENT}]


kw_parameter : (KEYWORD | OPT_KEYWORD) pos_parameters


statement : simple_statement NEWLINES
          | dlt


simple_statement : SET lvalue TO: primary
                 | GOTO primary arguments
                 | RETURN arguments [FROM: primary] [TO: primary]
                 | primary arguments [RETURNING_TO: primary]
                 | lvalue ('+='|'-='|'*='|'/='|'%='|'^=') primary
                 | DONE [WITH: IDENT]
                 | native_elements


dlt : '====' NEWLINE
      1{'|' {'Y'|'N'|'-'} '|' expr NEWLINES}
      '====' NEWLINE
      1{action}
      '====' NEWLINES


action : '|' {'X'|' '} '|' [NEWLINES] {(simple_statement|CONTINUE) NEWLINES}


native_elements : NATIVE_STRING_LIT 
                | native_elements (NATIVE_STRING_LIT | primary)


lvalue : IDENT
       | simple_primary '.' IDENT
       | simple_primary '[' subscripts ']'


expr : primary
     | NOT expr
     | ABS expr
     | '-' expr
     | expr '^' expr
     | expr '*' expr
     | expr '/' expr
     | expr '//' expr
     | expr '%' expr
     | expr '+' expr
     | expr '-' expr
     | expr '<' expr
     | expr '<=' expr
     | expr '<~=' expr
     | expr '>' expr
     | expr '>=' expr
     | expr '>~=' expr
     | expr '==' expr
     | expr '~=' expr
     | expr '!=' expr
     | expr '<>' expr
     | expr '!~=' expr
     | expr '<~>' expr
     | native_elements


primary : simple_primary
        | '(' expr ')'
        | STRING | FLOAT | INTEGER | BOOL
        | GOT? [(MODULE | IDENT) '.'] KEYWORD
        | GOT? [(MODULE | IDENT) '.'] IDENT


simple_primary : ref_primary
               | RETURN_LABEL
               | simple_primary '.' RETURN_LABEL
               | simple_primary '[' subscripts ']'
               | '{' primary arguments '}'


subscripts : expr
           | subscripts ',' expr


arguments : {primary} {KEYWORD {primary}}

